# .github/workflows/android.yml
name: Build Manager

on:
  push:
    tags: [ "*" ]
    branches: [ "main" ]
    paths:
      - '.github/workflows/android.yml'
      - 'app/**'
      - 'apd/**'
      - 'build.gradle.kts'
      - 'gradle/libs.versions.toml'
      - 'gradle/wrapper/**'
      - 'gradle.properties'
  pull_request:
    branches: [ "main" ]
    paths:
      - '.github/workflows/android.yml'
      - 'app/**'
      - 'apd/**'
      - 'build.gradle.kts'
      - 'gradle/libs.versions.toml'
      - 'gradle/wrapper/**'
      - 'gradle.properties'
  workflow_call:
  workflow_dispatch:

jobs:
  build-manager:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version (YYMMDD)
        id: parse_version
        run: |
          VERSION=$(date -u +%y%m%d)
          echo "Generated Version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 8

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: 5.6.4

      - name: Setup ninja
        uses: seanmiddleditch/gha-setup-ninja@v6
        with:
          version: 1.12.1

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: 'platforms;android-29 build-tools;29.0.2'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

      - name: Configure Gradle properties
        run: |
          echo 'org.gradle.parallel=true' >> gradle.properties
          echo 'org.gradle.vfs.watch=true' >> gradle.properties
          echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties
          echo 'android.native.buildOutput=verbose' >> gradle.properties
          [ -f gradle.properties ] && sed -i 's/org.gradle.configuration-cache=true//g' gradle.properties || true

      - name: Build with Gradle
        run: ./gradlew clean assembleRelease

      # ✅ 关键：用 run 判断 secret 是否存在，输出到 output，不在 if 中引用 secrets
      - name: Check if signing key is available
        id: check_signing
        run: |
          if [ -n "${{ secrets.SIGNING_KEY }}" ]; then
            echo "SIGNING_AVAILABLE=true" >> $GITHUB_OUTPUT
          else
            echo "SIGNING_AVAILABLE=false" >> $GITHUB_OUTPUT
          fi

      - name: Sign Release
        # ✅ if 中只使用 steps 输出，不碰 secrets
        if: ${{ steps.check_signing.outputs.SIGNING_AVAILABLE == 'true' }}
        id: sign_app
        uses: kevin-david/zipalign-sign-android-release@v2
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
          zipAlign: true

      - name: Upload build artifact
        # ✅ 安全判断
        if: ${{ steps.check_signing.outputs.SIGNING_AVAILABLE == 'true' && steps.sign_app.outputs.signedReleaseFile != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: APatch
          path: ${{ steps.sign_app.outputs.signedReleaseFile }}

      - name: Release APK
        # ✅ 安全判断
        if: ${{ steps.check_signing.outputs.SIGNING_AVAILABLE == 'true' && github.ref_type == 'tag' }}
        uses: ncipollo/release-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ github.ref_type == 'tag' && github.ref_name || steps.parse_version.outputs.VERSION }}
          artifacts: ${{ steps.sign_app.outputs.signedReleaseFile }}
          generateReleaseNotes: true
          makeLatest: true
          replacesArtifacts: true
